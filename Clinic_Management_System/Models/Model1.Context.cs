//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinic_Management_System.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KIITEntities : DbContext
    {
        public KIITEntities()
            : base("name=KIITEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<DoctorAppointment> DoctorAppointments { get; set; }
        public virtual DbSet<Drug> Drugs { get; set; }
        public virtual DbSet<DrugDelivery> DrugDeliveries { get; set; }
        public virtual DbSet<Inbox> Inboxes { get; set; }
        public virtual DbSet<MemberLogin> MemberLogins { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientOrderDetail> PatientOrderDetails { get; set; }
        public virtual DbSet<RoleDetail> RoleDetails { get; set; }
        public virtual DbSet<SpecializedData> SpecializedDatas { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
    
        public virtual int InsertMember(string emailId, string password, Nullable<int> roleId)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMember", emailIdParameter, passwordParameter, roleIdParameter);
        }
    
        public virtual int InsertPatient(string firstName, string lastName, Nullable<System.DateTime> dOB, string gender, string address, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPatient", firstNameParameter, lastNameParameter, dOBParameter, genderParameter, addressParameter, memIdParameter);
        }
    
        public virtual int UpdatePatient(string firstName, string lastName, Nullable<System.DateTime> dOB, string gender, string address, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatient", firstNameParameter, lastNameParameter, dOBParameter, genderParameter, addressParameter, memIdParameter);
        }
    
        public virtual int UpdatePassword(string password, Nullable<int> memId)
        {
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePassword", passwordParameter, memIdParameter);
        }
    
        public virtual int InsertAppointment(Nullable<int> patientId, Nullable<int> doctorId, string subject, string description, Nullable<System.DateTime> appDate)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var appDateParameter = appDate.HasValue ?
                new ObjectParameter("AppDate", appDate) :
                new ObjectParameter("AppDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAppointment", patientIdParameter, doctorIdParameter, subjectParameter, descriptionParameter, appDateParameter);
        }
    
        public virtual int InsertMessage(string fromEmail, string toEmail, string subject, string message, Nullable<System.DateTime> messageDate, Nullable<int> replyId, Nullable<int> isRead)
        {
            var fromEmailParameter = fromEmail != null ?
                new ObjectParameter("FromEmail", fromEmail) :
                new ObjectParameter("FromEmail", typeof(string));
    
            var toEmailParameter = toEmail != null ?
                new ObjectParameter("ToEmail", toEmail) :
                new ObjectParameter("ToEmail", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var messageDateParameter = messageDate.HasValue ?
                new ObjectParameter("MessageDate", messageDate) :
                new ObjectParameter("MessageDate", typeof(System.DateTime));
    
            var replyIdParameter = replyId.HasValue ?
                new ObjectParameter("ReplyId", replyId) :
                new ObjectParameter("ReplyId", typeof(int));
    
            var isReadParameter = isRead.HasValue ?
                new ObjectParameter("IsRead", isRead) :
                new ObjectParameter("IsRead", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMessage", fromEmailParameter, toEmailParameter, subjectParameter, messageParameter, messageDateParameter, replyIdParameter, isReadParameter);
        }
    
        public virtual int InsertDoctor(string firstName, string lastName, Nullable<int> totalExperience, Nullable<int> specializedId, string gender, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var totalExperienceParameter = totalExperience.HasValue ?
                new ObjectParameter("TotalExperience", totalExperience) :
                new ObjectParameter("TotalExperience", typeof(int));
    
            var specializedIdParameter = specializedId.HasValue ?
                new ObjectParameter("SpecializedId", specializedId) :
                new ObjectParameter("SpecializedId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDoctor", firstNameParameter, lastNameParameter, totalExperienceParameter, specializedIdParameter, genderParameter, memIdParameter);
        }
    
        public virtual int UpdateDoctor(string firstName, string lastName, Nullable<int> totalExperience, Nullable<int> specializedId, string gender, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var totalExperienceParameter = totalExperience.HasValue ?
                new ObjectParameter("TotalExperience", totalExperience) :
                new ObjectParameter("TotalExperience", typeof(int));
    
            var specializedIdParameter = specializedId.HasValue ?
                new ObjectParameter("SpecializedId", specializedId) :
                new ObjectParameter("SpecializedId", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctor", firstNameParameter, lastNameParameter, totalExperienceParameter, specializedIdParameter, genderParameter, memIdParameter);
        }
    
        public virtual int InsertSupplier(string firstName, string lastName, string companyName, string companyAddress, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSupplier", firstNameParameter, lastNameParameter, companyNameParameter, companyAddressParameter, memIdParameter);
        }
    
        public virtual int UpdateSupplier(string firstName, string lastName, string companyName, string companyAddress, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var companyAddressParameter = companyAddress != null ?
                new ObjectParameter("CompanyAddress", companyAddress) :
                new ObjectParameter("CompanyAddress", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSupplier", firstNameParameter, lastNameParameter, companyNameParameter, companyAddressParameter, memIdParameter);
        }
    
        public virtual int OrderDrug(Nullable<int> patientId, Nullable<int> drugId, Nullable<int> orderNumber, Nullable<int> quantity, Nullable<System.DateTime> orderedDate)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("PatientId", patientId) :
                new ObjectParameter("PatientId", typeof(int));
    
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            var orderNumberParameter = orderNumber.HasValue ?
                new ObjectParameter("OrderNumber", orderNumber) :
                new ObjectParameter("OrderNumber", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var orderedDateParameter = orderedDate.HasValue ?
                new ObjectParameter("OrderedDate", orderedDate) :
                new ObjectParameter("OrderedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OrderDrug", patientIdParameter, drugIdParameter, orderNumberParameter, quantityParameter, orderedDateParameter);
        }
    
        public virtual int UpdateOrderStatus(string orderStatus, Nullable<int> orderId)
        {
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateOrderStatus", orderStatusParameter, orderIdParameter);
        }
    
        public virtual int InsertDrug(string drugName, Nullable<System.DateTime> man_Date, Nullable<System.DateTime> exp_Date, string use, string side, Nullable<int> quan)
        {
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var man_DateParameter = man_Date.HasValue ?
                new ObjectParameter("Man_Date", man_Date) :
                new ObjectParameter("Man_Date", typeof(System.DateTime));
    
            var exp_DateParameter = exp_Date.HasValue ?
                new ObjectParameter("Exp_Date", exp_Date) :
                new ObjectParameter("Exp_Date", typeof(System.DateTime));
    
            var useParameter = use != null ?
                new ObjectParameter("Use", use) :
                new ObjectParameter("Use", typeof(string));
    
            var sideParameter = side != null ?
                new ObjectParameter("Side", side) :
                new ObjectParameter("Side", typeof(string));
    
            var quanParameter = quan.HasValue ?
                new ObjectParameter("Quan", quan) :
                new ObjectParameter("Quan", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDrug", drugNameParameter, man_DateParameter, exp_DateParameter, useParameter, sideParameter, quanParameter);
        }
    
        public virtual int RemoveDrug(Nullable<int> drugId)
        {
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveDrug", drugIdParameter);
        }
    
        public virtual int UpdateDrug(Nullable<int> drugId, string drugName, Nullable<System.DateTime> man_Date, Nullable<System.DateTime> exp_Date, string use, string seff, Nullable<int> quan)
        {
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            var drugNameParameter = drugName != null ?
                new ObjectParameter("DrugName", drugName) :
                new ObjectParameter("DrugName", typeof(string));
    
            var man_DateParameter = man_Date.HasValue ?
                new ObjectParameter("Man_Date", man_Date) :
                new ObjectParameter("Man_Date", typeof(System.DateTime));
    
            var exp_DateParameter = exp_Date.HasValue ?
                new ObjectParameter("Exp_Date", exp_Date) :
                new ObjectParameter("Exp_Date", typeof(System.DateTime));
    
            var useParameter = use != null ?
                new ObjectParameter("Use", use) :
                new ObjectParameter("Use", typeof(string));
    
            var seffParameter = seff != null ?
                new ObjectParameter("Seff", seff) :
                new ObjectParameter("Seff", typeof(string));
    
            var quanParameter = quan.HasValue ?
                new ObjectParameter("Quan", quan) :
                new ObjectParameter("Quan", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDrug", drugIdParameter, drugNameParameter, man_DateParameter, exp_DateParameter, useParameter, seffParameter, quanParameter);
        }
    
        public virtual int InsertDelivery(Nullable<int> orderId, Nullable<int> supplierId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDelivery", orderIdParameter, supplierIdParameter);
        }
    
        public virtual int InsertReplyMessage(string from, string to, string subject, string desc, Nullable<System.DateTime> date, Nullable<int> reply)
        {
            var fromParameter = from != null ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(string));
    
            var toParameter = to != null ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(string));
    
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("Desc", desc) :
                new ObjectParameter("Desc", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var replyParameter = reply.HasValue ?
                new ObjectParameter("Reply", reply) :
                new ObjectParameter("Reply", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReplyMessage", fromParameter, toParameter, subjectParameter, descParameter, dateParameter, replyParameter);
        }
    
        public virtual int UpdateAppStatus(string appointmentStatus, Nullable<int> appointmentId)
        {
            var appointmentStatusParameter = appointmentStatus != null ?
                new ObjectParameter("AppointmentStatus", appointmentStatus) :
                new ObjectParameter("AppointmentStatus", typeof(string));
    
            var appointmentIdParameter = appointmentId.HasValue ?
                new ObjectParameter("AppointmentId", appointmentId) :
                new ObjectParameter("AppointmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAppStatus", appointmentStatusParameter, appointmentIdParameter);
        }
    
        public virtual int UpdateDeliveryDate(Nullable<int> deliveryId, Nullable<System.DateTime> dDate)
        {
            var deliveryIdParameter = deliveryId.HasValue ?
                new ObjectParameter("DeliveryId", deliveryId) :
                new ObjectParameter("DeliveryId", typeof(int));
    
            var dDateParameter = dDate.HasValue ?
                new ObjectParameter("DDate", dDate) :
                new ObjectParameter("DDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDeliveryDate", deliveryIdParameter, dDateParameter);
        }
    
        public virtual int InsertAdmin(string firstName, string lastName, string address, string gender, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdmin", firstNameParameter, lastNameParameter, addressParameter, genderParameter, memIdParameter);
        }
    
        public virtual int UpdateAdmin(string firstName, string lastName, string address, string gender, Nullable<int> memId)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var memIdParameter = memId.HasValue ?
                new ObjectParameter("MemId", memId) :
                new ObjectParameter("MemId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdmin", firstNameParameter, lastNameParameter, addressParameter, genderParameter, memIdParameter);
        }
    
        public virtual int UpdateMessageStatus(Nullable<int> messageId)
        {
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMessageStatus", messageIdParameter);
        }
    
        public virtual int UpdateDQuan(Nullable<int> quantity, Nullable<int> drugId)
        {
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var drugIdParameter = drugId.HasValue ?
                new ObjectParameter("DrugId", drugId) :
                new ObjectParameter("DrugId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDQuan", quantityParameter, drugIdParameter);
        }
    }
}
